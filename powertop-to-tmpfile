#!/usr/bin/env bash

# powertop-to-tmpfile - convert PowerTOP recommendations into a tmpfiles.d configuration file.
#
# Copyright (C) 2024 Philipp Micheel
#
#	This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

: "${BASH_VERSION?This script requires the GNU Bash shell.}"
set -eu -o pipefail

SCRIPTNAME=$(basename "${BASH_SOURCE[0]}")
VERSION="0.1.0"

# PowerTOP is locale aware
export LC_ALL=C

HELP_SUFFIX=$'\n'"Try '${SCRIPTNAME} --help' for more information."
# The --auto-tune defaults can be overwritten from environment for debugging.
: "${TMPFILE:=/etc/tmpfiles.d/powertop.conf}"
: "${TMPFILE_ACTIVATE:=1}"

# Print usage information in the `help2man` recommended format.
# The parameter [man] enables further details for generating the man page.
# Usage: print_help [man]
function print_help {
	local REPLY
	case ${1-} in
	'' | man)
		IFS='' read -r -d '' <<-EOF || echo -n "${REPLY}"
			Convert PowerTOP recommendations into a tmpfiles.d configuration file.

			Usage: ${SCRIPTNAME} <OPTION> [ARGS]

			Options:
			      --auto-tune       Execute powertop to generate and apply the tmpfile \`${TMPFILE}\`.
			      --csv <FILENAME>  Convert <FILENAME> file into tmpfiles.d format and print it to stdout.
			  -h, --help            Print this help information.
			  -V, --version         Print version information.

			Examples:
			  ${SCRIPTNAME} --csv powertop.csv >>powertop.conf  Convert a powertop.csv into the tmpfile powertop.conf.
			  sudo ${SCRIPTNAME} --auto-tune                    Automatically generate and activate the file \`${TMPFILE}\`.

			Perform the automatic steps manually:
			  sudo powertop --csv=powertop.csv                                                   Collect the PowerTOP recommendations into file \`powertop.csv\`
			  ${SCRIPTNAME} --csv powertop.csv |sudo tee -a ${TMPFILE}  Convert the powertop.csv to a tmpfile
			  sudo systemd-tmpfiles --create ${TMPFILE}                       Activate the generated tmpfile

			Report bugs to <https://github.com/bbx0/powertop-to-tmpfile/issues>.
		EOF
		;;&
	'') echo "See 'man ${SCRIPTNAME}' for more information." ;;
	man)
		IFS='' read -r -d '' <<-EOF || echo -n "${REPLY}"

			Environment:
			  TMPFILE <FILENAME>      Overrides the target file for the \`--auto-tune\` option.
			  TMPFILE_ACTIVATE <0|1>  Overrides the execution of \`systemd-tmpfiles --create\` for the TMPFILE. The default is 1 (enabled).

			Files:
			  /etc/tmpfiles.d/powertop.conf  Default target file for the \`--auto-tune\` option.
		EOF
		;;
	*) print_error_exit "unrecognized parameter '${1}'${HELP_SUFFIX}" ;;
	esac
}

# Print version information in the `help2man` recommended format
# Usage: print_version
function print_version {
	local REPLY && IFS='' read -r -d '' <<-EOF || echo -n "${REPLY}"
		${SCRIPTNAME} ${VERSION}

		Copyright (C) 2024 Philipp Micheel
		License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
		This is free software: you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.

		Written by Philipp Micheel.
	EOF
}

# Print error message and exit with status code 1
# Usage: print_error_exit <MESSAGE>
function print_error_exit {
	printf '%s: %s\n' "${SCRIPTNAME}" "${*}" >&2
	exit 1
}

# Trim leading and trailing quotes including spaces from string
# Usage: trim_quotes <STRING>
function trim_quotes {
	[ $# -eq 1 ] || print_error_exit "Missing parameter trim_quotes: <STRING>"
	local v=${1}

	# https://stackoverflow.com/a/3352015
	v="${v#"${v%%[![:space:]]*}"}"
	v="${v%"${v##*[![:space:]]}"}"

	v="${v#[$'\'\"']}"
	v="${v%[$'\'\"']}"
	echo "${v}"
}

# Convert a given powertop.csv into systemd-tmpfiles format
# Usage: csv_to_tmpfile <FILENAME>
function csv_to_tmpfile {
	[[ $# -eq 1 && -n "${1}" ]] || print_error_exit "missing parameter csv_to_tmpfile: <FILENAME>"
	[ -f "${1}" ] || print_error_exit "file '${1}' not found"
	local filename=${1}

	printf '## Generated by %s at %(%Y-%m-%d %H:%M:%S %Z)T\n' "${SCRIPTNAME} ${VERSION}"
	# Find the Description;Script block in the section "Software Settings in Need of Tuning"
	sed -e '0,/Software Settings in Need of Tuning/d' -e '1,/^Description;Script/d' -e '/____________________________________________________________________/,$d' <"${filename}" |
		while IFS='' read -r line; do
			# Split each line into a 2 columns: "Description" "Script" delimited by ';echo'
			# Splitting by ; is not sufficient as the description can contain additional ; characters
			# Pattern: "Description;Script"
			#		Runtime PM for PCI Device Intel Corporation Device;echo 'auto' > '/sys/bus/pci/devices/0000:00:00.0/power/control';
			#		Runtime PM for PCI Device Advanced Micro Devices, Inc. [AMD] Matisse/Vermeer Data Fabric: Device 18h; Function 1;echo 'auto' > '/sys/bus/pci/devices/0000:00:18.1/power/control';
			IFS=$'\x0C' read -r -a columns <<<"${line/;echo/$'\x0C'}"
			[ ${#columns[@]} -ne 2 ] && {
				echo "## Cannot parse line:" "${line}"
				continue
			}
			description=${columns[0]}
			script=${columns[1]%;} # Trim a trailing ';'

			# Split the "Script" into a 2 columns: "'Value'" "'Filename'" delimited by ' > '
			IFS=$'\x0C' read -r -a script <<<"${script/' > '/$'\x0C'}"
			[ ${#script[@]} -ne 2 ] && {
				echo "# ${description}"
				echo "## Cannot parse script:" "${line}"
				continue
			}
			value=$(trim_quotes "${script[0]}")
			filename=$(trim_quotes "${script[1]}")

			echo "# ${description}"
			echo "w   ${filename}   -   -   -   -   ${value}"
		done
}

# Run powertop and generate the ${TMPFILE} file
# Usage: auto_tune
function auto_tune {
	[ ${EUID} -eq 0 ] || print_error_exit "must be run with root privileges."
	command -v powertop &>/dev/null || print_error_exit "'powertop' command not found"

	pushd "$(mktemp -d)" >/dev/null
	{
		printf 'Running powertop.. (This will take a while.)\n'
		(set -x && powertop --csv="${PWD}/powertop.csv" &>powertop.log) || print_error_exit "Execution of powertop failed!"$'\n'"$(<powertop.log)"

		printf 'Creating tmpfiles.d configuration: %s\n' "${TMPFILE}"
		csv_to_tmpfile powertop.csv >>"${TMPFILE}"

		if [ "${TMPFILE_ACTIVATE}" = "1" ]; then
			printf 'Activating tmpfiles.d configuration: %s\n' "${TMPFILE}"
			(set -x && systemd-tmpfiles --create "${TMPFILE}")
			printf 'All done.\n'
		else
			printf "Please run as root \`systemd-tmpfiles --create %s\` to activate the configuration or reboot.\n" "${TMPFILE}"
		fi

	}
	popd >/dev/null
}

# Process the command line options
case ${#} in
0) print_help >&2 && exit 1 ;;
1) case ${1} in
	--auto-tune)
		auto_tune
		;;
	--help | -h)
		print_help
		;;
	--version | -V)
		print_version
		;;
	--csv)
		print_error_exit "option '${1}' requires parameter <FILENAME>${HELP_SUFFIX}"
		;;
	*) print_error_exit "unrecognized option '${1}'${HELP_SUFFIX}" ;;
	esac ;;
2) case ${1} in
	--auto | --version | -V)
		print_error_exit "unexpected parameter '${2}'${HELP_SUFFIX}"
		;;
	--help | -h)
		print_help "${2}"
		;;
	--csv)
		csv_to_tmpfile "${2}"
		;;
	*) print_error_exit "unrecognized option '${1}'${HELP_SUFFIX}" ;;
	esac ;;
*) print_error_exit "invalid arguments '${*}'${HELP_SUFFIX}" ;;
esac
